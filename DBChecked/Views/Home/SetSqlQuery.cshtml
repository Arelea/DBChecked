@model DBChecked.ViewModels.SetSqlQueryViewModel

<form asp-action="SetSqlQuery" autocomplete="on">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="@this.Model.Form.ConnectionsString" />
    <div class="form-row">
        <div class="form-group col-md-6">
            <label asp-for="@this.Model.Form.Connection" class="control-label">База данных</label>
            <select asp-for="@this.Model.Form.Connection" class="form-control" asp-items="@(new SelectList(this.Model.ConnectionList, "Value", "Text"))"></select>
            <span asp-validation-for="@this.Model.Form.Connection" class="text-danger"></span>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label asp-for="@this.Model.Form.Query" class="control-label">Запрос</label>
            <textarea asp-for="@this.Model.Form.Query" class="form-control" rows="3"></textarea>
            <span asp-validation-for="@this.Model.Form.Query" class="text-danger"></span>
        </div>
    </div>
    <div class="form-row input-btn-group">
        <div class="form-group submit-btn">
            <input type="submit" value="Исполнить" class="btn btn-primary-submit">
        </div>
    </div>
</form>

@if (this.Model.ErrorMessage != null)
{
    <div class="text-center alert-danger">
        <h2 class="display-4">Ошибка</h2>
        <p>@this.Model.ErrorMessage</p>
    </div>
}
@if (this.Model.Result != null && this.Model.Result.Any())
{
    var dynamic = this.Model.Result.FirstOrDefault();
    var parsedDynamic = dynamic as IDictionary<string, object>;

    <div class="table-wrapper">
        <table class="table table-standart">
            <thead>
                <tr>
                    @foreach (var columnName in parsedDynamic.Keys)
                    {
                        <th>
                            @columnName
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var valueRow in this.Model.Result)
                {
                    var parsedValueRow = valueRow as IDictionary<string, object>;
                    <tr>
                        @foreach (var columnValue in parsedValueRow.Values)
                        {
                            <td>
                                @columnValue
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
